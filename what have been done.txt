w * Kita nak update yang baru tapi kalau buat migration unutk alter table
* kene buat migration file baru.
* run php artisan make:migration namaaction_nama_table_action_apa
* tambah schema untuk table function.
* comment balik yang untuk specific user sahaja. 
* cater masalah kguna terniary operator
* enctype tu memang penting untuk hantar file
* php artisan storage:link
* jangan percaya input dari user. so, kita control dari sini
* guna nama sebagai id. 
* go through how to make dr; Disaster recovery
* stress-test. 16cpu 32 gb ram
* cara nak buka attachmetn
* edit kat file show.blade.php
* dah uncomment balik
* !bug Fix: bukan kene  letak enctype tu kat input. tapi dekat element form tag.
* belajar macam mana system web function. 
*buat cron job untuk save file every 3 hari. buat satu script untuk backup db; kat mana nak refer? laravel command. artisan console.
* kene config extension.
* cuba go through magic method.unit testing.
* model boleh buat macam macam benda.
!Fahami fundementals. Betul2.
* Laravel connect multiple database.
* go through and master kubernetes.
* kita kene ada extension. odbc driver. untuk connect.
* boleh define kat controller. kat env define db2 yang ada. and then define, db2 lain tu dalam config/database.php. define je.
* sebelum kita boleh define sesuatu kita kene kenal dulu. apa yang kita nak define tu. 
* lain masalah lain id.
* uuid. universally uniq id. dia gengerate number through time and date. so, brother ni baca semua even sampai ke wiki.
^ Part setup usually lama. 
* Laravel validation. boleh validate dari client atau server.
* guna inheritance
* old ni guna untuk
* update rule
* go through semula regex
* macam mana nak buat audit trail?
*  Structured Programming-> Oop-> Solid-> DP.
* validation usually kita buat dekat controller.
* Sputty package untuk resize gambar
* laravel form request validation..
* its not a good practice nak letak rules dekat dalam validate. controller kene  nipis. model kene fat.'
* run>> php artisan make:request StoreTrainingRequest
* Data Engineer
* bitquery. nosql vs rdbms.
* laravel ada limit. learn these strength and understand these limits.
* j meter stress test
* Buat class untuk hold and handle request.:dah create pindahkan validation rules into request, pastu includekan class tu.
* Macam mana orang attack kita. its a cyber warfare. LEARN. guna ssh
* macam mana nak override mesej kalau tak suka?
*letak nama item tu, dengan nama error tu.
* localization {{}}
* Laravel : Search
* buat div yang boleh float kat belah kiri. lepas tu test. tengok dpt tak keyword.
* post method je perlukan csrf
* kalau assign pakai => , kalau nak access isinya guna ->
* Kalau nak sort.  boleh.
* test dekat tinker >> $user->trainings()->limit(3)->toSql()
* kalau nak test kat tinker guna facade>> \DB::table('trainings')->orderBy('created_at','asc')->toSql()
* ni note aku waktu ni



=================
DAY 04:
+++++++++++++++++

1. Sending EMail.
* "guna mailtrap", package. mail server kita free. tapi ada limitation.
* kalau kita guna mail server lain, nanti google akan consider spam.
* "MAIL SERVER" yang quality. takut nnty diorang guna spam.
* Buat satu subdomain untuk system  email.   kalau marketing buat marketing. kalau system guna buat benda lain.. 
* "mail catcher ", free dan bolehd install kat login

------------------
Mail Trap:
------------------

* copy credential terus paste dekat env
* mail_from_address ; tak kisah email apa2. tak wujud pun tak pe.
* done setup smtp setting.
* Boleh try tengok aws. 

* Bila kita create training dia akan hantar email.
* "mail facade"
* edit cantik2 email tu pastu boleh hantar.
* Mail::send('template maana nak send','dynamic data',functionnakhantar)
* ni baru static ke email specific
* boleh guna klas.
* staging mail server. kita akan nampak sendiri.
* use Mail sebab kita guna mail punya facade.

* broken pipe maybe sebab wifi.

* dynamic data, kita ubah. 
* adjsut dekat array
* ['a' => something]
* a tu akan dipassing ke blade.php 

* Mailable Classes.
* search "mail classes."
* email provider yang laju.
* php artisan make:mail namaMail
* construct + build.
* apa nak inject + apa nak buat
* construct + helper
* nak guna  class tadi. Mail::to('kepada siapa'->send(new location kat mana atau boleh declare.))
* kita panggil class tu punya constructor.
* cara nak inject dynamic data.
* guna ikut public.
* instantiate that object
* use case oop dengan design pattern. 
* hafal buku.

* error Argument 1 passed to App\Mail\TrainingCreated::__construct() must be an instance of App\Model\Training, instance of App\Models\Training given, called in C:\laragon\www\day04\app\Http\Controllers\TrainingController.php on line 110
* silap eja models untuk define Training punya model

* Bila install new project. 
* composer install 
* untuk install smua package kat dalam vendor.
 * code .
 * update/buat .env
 * php artisan key:generate
*

--------
Cara Nak Buat Job.

* kita tak nak user tunggu. so, buat serentak untuk semua. 
* kita bawak process hantar email tadi, tapi guna job
* benda2 penting macam tu boleh dihandle.
* boleh je guna que. tapi kita guna job.
* method untuk buat processing kat belaang.
* Search "laravel Job"
* guna que. supaya user tak payah tunggu,

* automatekan background process.
* Dig deeper dalam Que. untuk kelajuan.
* Amazon sqs untuk manage job
* rdms ni boleh manage job

* driver notes. 
* kene ada satu table untuk simpan semua log yang job kita buat.
* redis kita tak guna pun lagi. redis ni rdms.
* php artisan make:job NamaJob.

* Class structure tu. apa yang kita akan dapat.
* kita nak guna driver, driver database. instead of rdbms. 
* bila kita dispatch job, 

Î» php artisan migrate:status
+------+---------------------------------------------------------------+-------+
| Ran? | Migration                                                     | Batch |
+------+---------------------------------------------------------------+-------+
| Yes  | 2014_10_12_000000_create_users_table                          | 1     |
| Yes  | 2014_10_12_100000_create_password_resets_table                | 1     |
| Yes  | 2019_08_19_000000_create_failed_jobs_table                    | 1     |
| Yes  | 2020_12_14_071318_create_trainings_table                      | 1     |
| Yes  | 2020_12_22_024901_alter_trainings_table_add_attachment_column | 2     |
| No   | 2020_12_28_034310_create_jobs_table                           |       |
+------+---------------------------------------------------------------+-------+


* define dekat env. que_connection.
* database/redis/sqs <- bergantung pada connection mana kita nak pakai.

* php artisan make job
* SendEmailJob
* cara nak replace function dekat dalam controller
* copy function yang lama sangt tu, declaire mail punya facade. define satu property training 

* xde supervisor nak run job.
* gambar tu jadikan job
* bug fix. $this-> training =$training;

----------
* Macam mana nak buat supervisor untuk dispatch Job
* php artisan queue:listen

* service container. maksud dia apa.
* search "solid priciple."
* satu controller satu use case. kalau training, untuk training sahaja.
* job locking. awas jangan deadlock. 
* job red limiting, untuk jaga daripada deadelock.
* service container, apa2 class yang boleh di inject something, dan kita buat something with that data.
* inject object daripada class lain. 

----------
* nak guna db elok pakai postgress
* untuk esok, mssql server. kene ada ada extension
* install extension, odbc untuk sql server

--------
ELOQUENT

* bnyak libatkan MODEL
* ORM 
* pastikan kita config database. laravel support 4 jenis db. kalau takde kene custom configuration.
* buat model trus ada seeder ke apa.
* php artisan  make:model NamaModel --apnak/ -a senang sikit.
* make: model punya command. auto generate models dalam app/Models.

* Table Names
* kalau nama model BentukSingular. table akan jadi BentukPlural
* kalau nak custom nama  ke apa.

* Primary Keys
* by default nama_id.
* uuid , adjust autoincrement.
* protected $keyType = 'string';

* Timestamp.
* public timestamp false. crud takkan kacau table ni.
* constant Created function

* Database Connections.
* bergantung pada keadaan. 
* bila ada multiple connection
* protected $connection = 'sqlite';
* buat je 2 model. 
* yang penting setiap model define connection dia kat mana

* Default Attribute Values.
* kita define dekat model.
* 'delayed' => false,
* cara kita  nak override apa2 je dalma laravel

*Retriving.
* use a/b/models

* Buildig Query
* kalau nak buat search hari tu.

* Cara nak buat refresh method.
* refresh bila nka buat custom audit trails.

* Collections.
* query all and quesry get.

* semua ni boleh guna tinker.
* advance subqueryy.\
* model binding.
* guna popo atau mas assignement.
* practice je semua guna tinker.

* FAHAM MACAM MANA TINKER NI WORK WITH MODEL.
----------------------------------------
* Cara nak install Laravel font awesome

Install Font Awesome in Laravel

Installation in Laravel with npm
npm install --save @fortawesome/fontawesome-free

Include the Font Awesome css in the app.scss file at the top.
@import '~@fortawesome/fontawesome-free/css/all.css';

Add the following line of code to the webpack.mix.js file.

mix.copyDirectory('node_modules/@fortawesome/fontawesome-free/webfonts', 'public/webfonts');

* nak update npm 'npm install -g npm'

* Kita boleh install guna cdn

* once dah install. boleh guna semua icon atau resource font awesome
* contoh kat sini macam mana nak letak gambar user dekat sebelah nama.

------------
Laravel Notifications. 

* toArray
* toMail
* toSlack

* rujuk macam mana nak config
* wajib letak notifiable

* time user delete keluar notifications.
* php artisan make:notification NamaNotification
* return ['database','mail'];
* adjust kat mana2. 
* toArray hantar dalam data

* kalau nak hantar toArray dalam database.
* kene create table. untuk database notification.
* php artisan notification:table 
* jangan lupa migrate.

* dekat model kita boleh migrate.
* trait, build in logic, kita boleh custom
* satu user have many traits

----------
Making dropdown untuk notificaiton
-----
Training created

* macam mana nak buat untuk unread notifications.
* Search "unread notification"
--------
Policy

cth: users takleh access unauthorize trainings.

*php artisan make:policy PostPolicy.

* kalau nak bind terus dengan model
kene tambah --model=Model.

*kalau bind. terus boleh create semua add delete.

Î» php artisan make:policy Training --model=Training
Policy created successfully.

* buat policy, register dalam authservice provider
* === strict equal
* nak tengok override 403, tengok custome. just letak kat dalam error folder

*nak buang view punya function. so, guna policy untuk control button.

------
kalau kita simply pindah can punya section. klau buang something dekat view. nanti smua berubah

!update sekali dekat policy



=================
DAY 06
=================

Soft delete
-
* bila kita delete, tapi kita tak delete dalam database.
* dia just akan buat satu lagi column untuk flag
* kene buat soft delete
* pastu kene migarate

* kat model yang kita nak delete tu. kene declarie
* setup dekat model2 yang terlibat.
* lepas tu buat migration file
* kita boleh bagi peluang kat user untuk restore dalam masa bbrapa hari. bergantung pada policy.
* kita boleh control policy.
* dekat policy kita boleh force delete.
* cascade.


* start buat mvc kita. daripada route
*buat route. untuk buat Force Delete

* kalau timezone pelik2. boleh tukar time

---------------
Î» php artisan tinker
Psy Shell v0.10.5 (PHP 7.4.13 â cli) by Justin Hileman
>>> Training::onlyTrash()->get()
[!] Aliasing 'Training' to 'App\Models\Training' for this Tinker session.
BadMethodCallException with message 'Call to undefined method App\Models\Training::onlyTrash()'
>>> Training::onlyTrashed()->get()
=> Illuminate\Database\Eloquent\Collection {#4319
     all: [
       App\Models\Training {#4320
         id: 34,
         title: "SoftDelete",
         description: "How to softdelete data from user",
         trainer: "tarmizi",
         attachment: null,
         user_id: 5,
         created_at: "2020-12-29 02:44:53",
         updated_at: "2020-12-29 02:47:04",
         deleted_at: "2020-12-29 02:47:04",
       },
     ],
   }
>>> Training::onlyTrashed()->get()->count()
=> 1
>>> Training::withTrashed()->get()->count()
=> 24
>>> Training->restore()
PHP Error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR), expecting ';' in Psy Shell code on line 1
>>> $training = Training::withTrashed()->find(34)
=> App\Models\Training {#4357
     id: 34,
     title: "SoftDelete",
     description: "How to softdelete data from user",
     trainer: "tarmizi",
     attachment: null,
     user_id: 5,
     created_at: "2020-12-29 02:44:53",
     updated_at: "2020-12-29 02:47:04",
     deleted_at: "2020-12-29 02:47:04",
   }
>>> $training->restore()
=> true
-------------------------------

withTrash() -> semua training dengn yang disoft delete

----------------------------
*macam mana nak implement custom middleware.
* kalau dia bukan admin. dia xleh access resource contoh dashbord.
* tapi kene ada migration untuk buat table nak pegang status user.
* cara untuk alter migration.

1. buat migration baru. isnullable tu kalau dah ada data. klaau x letak isnullable dia kan bagi error.

2. php artisan make:middleware NamaMiddleware
2.1 Buat logic dia dulu
  $user = auth()->user() //adakah user ni dah diauthenticate
    if($user->isAdmin !=1){
                return redirect()->to('/home');
            }

3. register middleware. macam police traffic kene register. dekat kernel.php
3.1 namakan middleware katt route midlleware

'admin' => \App\Http\Middleware\AdminMiddleware::class, 

4. pergi kat route. gunakan middleware tu. function dalam tu, admin je boleh access./ kat controller"trainingcontroller"
4.1 hantar dalam bentuk array.
$this->middleware(['namaMw1'],['namaMw2']);

!pastikan ejaan betul dekat mana2 je.
-----------
Dive deeper into laravel permission.
* coding ninja. deliver dalam masa yang cepat.

-----------
cara nak GUNA PACKAGE LUAR.
* kita boleh fix code, tapi x senang nak fix relationship.
* xnak reinvent the wheel.

1A. Authenticaition Log
  1. Search "laravel audit". tengok star dia, baru kita tau package tu power tak power. owen-it

  2. Cara nak install, 
  !fun facts: kalau npm untuk js, kalau composer untuk php
   mana2 model yang kita nak monitor kita letak kat situ.

   composer require owen-it/laravel-auditing   }}}}}}}kalau download dari github
   php artisan auditing:install
   php artisan migrate

  use the OwenIt\Auditing\Auditable trait 
  implement the Owenit\Auditing\Contracts\Auditable interface 

  OwenIt\Auditing\Models\Audit -Model

  2.1 kalau ada masalah dengan composer punya memory, ubah dekat php.ini memory_limit jadi -1 . 
  2.2 kalau nak upgrade composer . composer upgrade


